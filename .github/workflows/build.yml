name: build

on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10
      - 'c*'

jobs:
  fetch_compile_publish:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    # container:
    #   image: debian:buster-slim
    env:
      DEBIAN_FRONTEND: noninteractive
      CROSS_COMPILE: arm-none-linux-gnueabihf-
    steps:
      # - name: Install Dependencies
      #   run: |
      #     apt-get update
      #     apt-get upgrade -y
      #     apt-get install -y bc bison build-essential crossbuild-essential-armhf flex git libncurses-dev libssl-dev

      - name: Install Dependencies
        run: |
          apt-get update
          apt-get upgrade -y
          apt-get install -y \
          bc \
          bison \
          build-essential \
          flex \
          git \
          libncurses-dev \
          libssl-dev \
          git \
          zip \
          unzip \
          xz-utils \
          wget \
          curl \
          ca-certificates \
          make \
          bash \
          file

      # RUN apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu && \
      #    ln -f -s /usr/aarch64-linux-gnu/lib/ld-linux-aarch64.so.1 /lib && \
      #    ln -f -s /usr/aarch64-linux-gnu/lib/libc.so.6 /lib && \
      #    ln -f -s /usr/aarch64-linux-gnu/lib/libdl.so.2 /lib && \
      #    ln -f -s /usr/aarch64-linux-gnu/lib/libm.so.6 /lib

      - run: |
          cd /opt; \
          wget https://developer.arm.com/-/media/Files/downloads/gnu-a/10.3-2021.07/binrel/gcc-arm-10.3-2021.07-aarch64-arm-none-linux-gnueabihf.tar.xz; \
          tar xvfJ gcc-arm-10.3-2021.07-aarch64-arm-none-linux-gnueabihf.tar.xz; \
          rm gcc-arm-10.3-2021.07-aarch64-arm-none-linux-gnueabihf.tar.xz
          
      - uses: actions/checkout@v4
      
      - name: Build eMMC data
        shell: bash
        working-directory: u-boot-imx6
        run: |
          export PATH="/opt/gcc-arm-10.3-2021.07-aarch64-arm-none-linux-gnueabihf/bin:$PATH"
          make mx6cuboxi_defconfig
          make -j$(nproc)
          install -v -m644 -D SPL deploy/spl-imx6-emmc
          install -v -m644 -D u-boot.img deploy/u-boot-imx6-emmc.img

      - name: Build eMMC boot0
        shell: bash
        working-directory: u-boot-imx6
        run: |
          export PATH="/opt/gcc-arm-10.3-2021.07-aarch64-arm-none-linux-gnueabihf/bin:$PATH"
          make mx6cuboxi_defconfig
          echo "CONFIG_SYS_MMC_ENV_PART=1" >> .config
          make -j$(nproc)
          install -v -m644 -D SPL deploy/spl-imx6-emmc-boot0
          install -v -m644 -D u-boot.img deploy/u-boot-imx6-emmc-boot0.img

      - name: Build eMMC boot1
        shell: bash
        working-directory: u-boot-imx6
        run: |
          export PATH="/opt/gcc-arm-10.3-2021.07-aarch64-arm-none-linux-gnueabihf/bin:$PATH"
          make mx6cuboxi_defconfig
          echo "CONFIG_SYS_MMC_ENV_PART=2" >> .config
          make -j$(nproc)
          install -v -m644 -D SPL deploy/spl-imx6-emmc-boot1
          install -v -m644 -D u-boot.img deploy/u-boot-imx6-emmc-boot1.img

      - name: Build SD
        shell: bash
        working-directory: u-boot-imx6
        run: |
          export PATH="/opt/gcc-arm-10.3-2021.07-aarch64-arm-none-linux-gnueabihf/bin:$PATH"
          make mx6cuboxi_defconfig
          echo "CONFIG_SPL_BOOT_DEVICE_SDHC=y" >> .config
          make -j$(nproc)
          install -v -m644 -D SPL deploy/spl-imx6-imx6-sd
          install -v -m644 -D u-boot.img deploy/u-boot-imx6-sd.img


      - name: Build SATA
        shell: bash
        working-directory: u-boot-imx6
        run: |
          export PATH="/opt/gcc-arm-10.3-2021.07-aarch64-arm-none-linux-gnueabihf/bin:$PATH"
          make mx6cuboxi_defconfig
          echo "CONFIG_SPL_BOOT_DEVICE_SATA=y" >> .config
          echo "CONFIG_SCSI_AHCI=y" >> .config
          echo "CONFIG_SPL_SATA_RAW_U_BOOT_USE_SECTOR=y" >> .config
          echo "CONFIG_SPL_SATA_RAW_U_BOOT_SECTOR=0x8a" >> .config
          echo "CONFIG_ENV_IS_NOWHERE=y" >> .config
          make -j$(nproc)
          install -v -m644 -D SPL deploy/spl-imx6-sata
          install -v -m644 -D u-boot.img deploy/u-boot-imx6-sata.img

      - name: Build SPI
        shell: bash
        working-directory: u-boot-imx6
        run: |
          export PATH="/opt/gcc-arm-10.3-2021.07-aarch64-arm-none-linux-gnueabihf/bin:$PATH"
          make mx6cuboxi_defconfig
          echo "CONFIG_SPL_BOOT_DEVICE_SPI_FLASH=y" >> .config
          make -j$(nproc)
          install -v -m644 -D SPL deploy/spl-imx6-spi
          install -v -m644 -D u-boot.img deploy/u-boot-imx6-spi.img

      - name: Archive Release
        uses: thedoctor0/zip-release@master
        with:
          type: 'zip'
          directory: "u-boot-imx6/deploy"
          filename: "u-boot-imx6-${{ github.ref_name }}.zip"
        
      - name: Release prebuilt
        uses: ncipollo/release-action@v1
        with:
          artifacts: "u-boot-imx6/deploy/u-boot-imx6-${{ github.ref_name }}.zip"
          allowUpdates: true
          token: ${{ secrets.GITHUB_TOKEN }}

      # - name: Upload to S3
      #   if: github.ref == 'refs/heads/v2018.01-solidrun-imx6' && github.event_name != 'pull_request'
      #   uses: shallwefootball/upload-s3-action@v1.3.3
      #   with:
      #     aws_key_id: ${{ secrets.IMAGES_S3_ACCESS }}
      #     aws_secret_access_key: ${{ secrets.IMAGES_S3_SECRET }}
      #     aws_bucket: ${{ secrets.IMAGES_S3_BUCKET }}
      #     endpoint: ${{ secrets.IMAGES_S3_HOST }}
      #     source_dir: deploy
      #     destination_dir: IMX6/U-Boot/${{ steps.tag_step.outputs.build_ver }}/${{ steps.tag_step.outputs.build_tag }}
